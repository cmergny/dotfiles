" Understand meaning of letters next to completion menu
" Prevent pyright to import modules
" Better snippets and completion
" Mapping for noh
call plug#begin('~/.vim/plugged')
	" Theme and airline
	Plug 'morhetz/gruvbox'
	Plug 'arcticicestudio/nord-vim'
	Plug 'itchyny/lightline.vim'
	" For autocompletion
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
	"Snippets
	Plug 'SirVer/ultisnips'
	Plug 'honza/vim-snippets'
	"For using cocvim and snippets
	"No it's for using tab to maneuver completion
	" Plug 'ervandew/supertab' 
	"Fuzzy Files Finder
	Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	Plug 'junegunn/fzf.vim'
	"FloatingTerminal
	Plug 'voldikss/vim-floaterm'
	"Auto close brackets
	Plug 'Raimondi/delimitMate'
	"To comment blocks
	Plug 'tpope/vim-commentary'
	"LateX completion
	Plug 'lervag/vimtex'
" Undo tree
Plug 'mbbill/undotree'
call plug#end()

colorscheme nord
let mapleader = " "
nnoremap <SPACE> <Nop>
set encoding=utf-8
set hidden	
set updatetime=300 
set number	
set belloff=all	
set tabstop=4
set shiftwidth=4
set autoindent	
set incsearch
set hlsearch
set nocompatible 
" set background=dark
" wrapping
set wrap
set linebreak
set breakindent
set formatoptions=l
set noswapfile
" set nobackup
" set nowritebackup
set undofile
set undodir=~/.vim/undodir
set laststatus=2
" setlocal spell
set spelllang=nl,en_gb
inoremap <c-s> <c-g>u<Esc>[s1z=`]a<c-g>u

" MAPPING
" Split windows
" nmap <c-v> :vsplit <CR> <c-w>l
" Search 
nmap <c-s> :%s/
" Change windows easely
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" Indent in visual keeps the selection
vnoremap < <gv
vnoremap > >gv
" FZF config
nmap <leader>ff :Files <CR>
nmap <leader>fh :Files ~<CR>
nmap <leader>fb :Buffers <CR>
" Floaterm  config
nmap <leader>tn :w <CR> :FloatermNew <CR>
nmap <leader>tt :w <CR> :FloatermToggle <CR>
tmap <leader>tn <c-\><c-n>:FloatermNew <CR>
tmap <leader>tk  <c-\><c-n> :FloatermKill <CR>
tmap <leader><Esc>  <c-\><c-n> :FloatermToggle <CR>
tmap <c-h>  <c-\><c-n> :FloatermPrev <CR>
tmap <c-l>  <c-\><c-n> :FloatermNext <CR>
tmap <leader>tm <c-\><c-n> 
tmap <c-k> <Up>
tmap <c-j> <Down>
" Open vimrc quickly
nmap <leader>ve :e ~/.vim/vimrc <CR>  
nmap <leader>vv :b ~/.vim/vimrc <CR>  
" PDB for python debugging
nmap <leader>pdb oimport pdb; pdb.set_trace()<Esc>
"Resize windows
nmap <M-Right> :vertical resize +1<CR>
nmap <M-Left> :vertical resize -1<CR>
nmap <M-Down> :resize +1<CR>
nmap <M-Up> :resize -1<CR>

" Vim commentary for gdl
autocmd FileType idlang setlocal commentstring=;\ %s

"Hide tildes on blanck lines
" highlight EndOfBuffer ctermfg=bg
" Make vertical separator pretty
highlight VertSplit cterm=NONE
set fillchars+=vert:\‚ñè

"Netrw file browser
let g:netrw_banner = 0
let g:netrw_winsize = 20

" Coc vim config
let g:coc_global_extensions = ['coc-json', 'coc-browser', 'coc-css', 'coc-eslint', 'coc-html', 'coc-sh', 'coc-pyright', 'coc-highlight', 'coc-vimtex', 'coc-snippets'] 
" let g:coc_snippet_next = '<tab>'
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)

" Trigger configuration. 
let g:UltiSnipsExpandTrigger="<c-w>" "remove mapping conflits with coc vim
let g:UltiSnipsListSnippets="<c-q>"
" default mapping
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" VimTex config
let maplocalleader = " "
let g:tex_flavor='latex'
let g:vimtex_quickfix_open_on_warning = 0 "No erro window open for warnings
let g:vimtex_view_method='zathura'

" Lightline colorsheme
let g:lightline = {'colorscheme': 'nord'}
